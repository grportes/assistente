package models.commons.dtos;
#if ( $gerarJsonAnnotations )

import com.fasterxml.jackson.annotation.JsonProperty;
    #if ( $CollectionUtils.isNotEmpty( $importsNecessariosSerializer ) )
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
        #foreach ( $import in $importsNecessariosSerializer )
import $import;
        #end
    #end
#end

import java.io.Serializable;
    #foreach ( $import in $importsNecessarios )
import $import;
    #end
import java.util.Objects;

import static java.util.Objects.isNull;

/**
 * Classe que representa informações...
 *
 * <p>Autor: $nomeAutor</p>
 *
 * @since $dataHora
 */
public class $nomeClasse implements Serializable {

    #macroDeclaracaoVariaves
    #macroConstructor
    #if ( $gerarClasseBuilder )
    #macroConstructorBuilder
    #end
    #macroGetters
    #macroEqualsHashcode
    #if ( $gerarClasseBuilder )
    #macroBuilder
    #end
}

#macro( macroComentario $texto )
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // $texto
    //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#end

#macro( macroDeclaracaoVariaves )
    #foreach( $definicao in $definicoes )
    private final $StringUtils.join( $definicao.Tipo, ' ', $definicao.NomeAtributo, ';' )
    #end

#end

#macro( macroConstructor )

    #macroComentario( "CONSTRUCTOR" )

    @Deprecated
    public $nomeClasse(
        #foreach ( $definicao in $definicoes )
        final $definicao.Tipo $definicao.NomeAtributo#if( $foreach.hasNext ),#end
        #end
    ) {

        #foreach ( $definicao in $definicoes )
        this.$definicao.NomeAtributo = $definicao.NomeAtributo;
        #end
    }

#end

#macro( macroConstructorBuilder )
    private $nomeClasse( final Builder builder ) {

        #foreach ( $definicao in $definicoes )
        this.$definicao.NomeAtributo = builder.$definicao.NomeAtributo;
        #end
    }

#end

#macro( macroGetters )

    #macroComentario( "GETTERS" )

    #foreach ( $definicao in $definicoes )
    #if ( $gerarJsonAnnotations )
    @JsonProperty( "$definicao.NomeAtributo" )
        #if ( $StringUtils.isNotBlank( $definicao.Tipo.JsonSerialize ) )
            #set ( $tipo = $StringUtils.substringAfterLast( $definicao.Tipo.JsonSerialize, "." ) )
    $StringUtils.join( '@JsonSerialize( using = ', $tipo, '.class )' )
        #end
    #end
    #set ( $nomeMetodo = $StringUtils.capitalize( $definicao.NomeAtributo ) )
    public $definicao.Tipo $StringUtils.join( 'get', $nomeMetodo, '() {' )

        return this.$definicao.NomeAtributo;
    }

    #end
#end

#macro( macroEqualsHashcode )

    #set( $varObj = $StringUtils.join( $StringUtils.lowerCase($StringUtils.substring($nomeClasse,0,1) ), $StringUtils.substring($nomeClasse,1) ) )
    #macroComentario( "EQUALS && HASHCODE" )

    @Override
    public boolean equals( final Object obj ) {

        if ( this == obj ) return true;
        if ( isNull( obj ) || getClass() != obj.getClass() ) return false;
        final $nomeClasse that = ($nomeClasse) obj;
        #macroExpressoesEquals( )
    }

    @Override
    public int hashCode() {

        return Objects.hash(
            #foreach ( $definicao in $identificadores )
                #set ( $metodo = $StringUtils.join( "get", $StringUtils.capitalize( $definicao.NomeAtributo ) ,"()" ) )
            $metodo#if( $foreach.hasNext ),#end
            #end
        );
    }

#end

#macro( macroExpressoesEquals )
    #set ( $primeiraLinha = true )
    #foreach ( $campo in $identificadores )
        #set ( $metodo = $StringUtils.join( "get", $StringUtils.capitalize( $campo.NomeAtributo ), "()" ) )
        #set ( $expressao = $StringUtils.join( "Objects.equals( ", $metodo, ", that.", $metodo , " )" ) )
        #if ( $primeiraLinha  )
            #set ( $primeiraLinha = false )
        return $expressao#if( $foreach.hasNext ),#else;#end
        #else
            && $expressao #if( !$foreach.hasNext );#end
        #end
    #end
#end

#macro( macroBuilder )

    #macroComentario( "BUILDER" )

    public static class Builder {

    #foreach ( $definicao in $definicoes )
        private $definicao.Tipo $definicao.NomeAtributo;
    #end

        public Builder() {

    #foreach ( $definicao in $definicoes )
            this.$definicao.NomeAtributo = null;
    #end
        }

    #foreach ( $definicao in $definicoes )
        #set ( $nomeMetodo = $StringUtils.capitalize( $definicao.NomeAtributo ) )
        public Builder $StringUtils.join( 'com', $nomeMetodo, '(' ) final $definicao.Tipo value ) {

            this.$definicao.NomeAtributo = value;
            return this;
        }

    #end
        public $nomeClasse build() {

            return new $nomeClasse( this );
        }

     }

#end