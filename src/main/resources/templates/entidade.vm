#macroImports

/**
 * Classe mapeamento ref. a tabela [ $modelo.getNomeCompletoTabela() ]
 *
 * <p>Autor: $nomeAutor</p>
 */
#macroEntidade
public class $modelo.getEntidade() extends Model {

    #macroColunasMapeadas
    #macroConstructor
    #macroGetterSetters
    #macroComentarios
    #macroEqualsHashcode

    #macroComentario( "METODOS AUXILIARES" )
}

#macro( macroImports )
import infra.models.Model;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;
    #if ( $modelo.isChaveComposta() )
import javax.persistence.EmbeddedId;
    #end
    #if ( $modelo.isAtributoVersion() )
import javax.persistence.Version;
    #end
import java.util.Objects;

    #foreach ( $import in $importsNecessarios )
import $import;
    #end
#end

#macro( macroEntidade )
@Entity
    #set ( $nomeCatalogo = $modelo.getCatalogo() )
    #set ( $nomeTabela = $modelo.getTabela() )
    #if ( $StringUtils.isNotBlank( $nomeCatalogo ) )
@Table( name = "$nomeTabela", schema = "$modelo.getOwner()", catalog = "$nomeCatalogo" )
    #else
@Table( name = "$nomeTabela" )
    #end
#end

#macro( macroComentario $texto )
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // $texto
    //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#end

#macro( macroColunasMapeadas )

    #macroComentario( "COLUNAS MAPEADAS" )

    #if ( $modelo.isChaveComposta() )
    @EmbeddedId
    private $StringUtils.join( $modelo.getEntidade(), "Id" ) id;

    #end
    #foreach( $campo in $campos )
        #set ( $isPk = !$modelo.isChaveComposta() && $campo.isPk() )
        #set ( $tipo = $StringUtils.substringAfterLast( $campo.getTipoJava(), "." ) )
        #if ( $isPk )
    @Id #if ( $campo.isAutoIncremento() )@GeneratedValue( strategy = GenerationType.IDENTITY ) #end
            #macroDefinicaoColumn( $campo )
        #else
            #if ( $StringUtils.equalsIgnoreCase( $campo.getColunaDB(), "version" ) )
    @Version
            #end
            #macroDefinicaoColumn( $campo )
        #end
    private $tipo #if ($campo.isPk())id;#{else}$campo.getColunaJava();#end

    #end
#end

#macro( macroDefinicaoColumn $campo )
    @Column( name = "$campo.getColunaDB()", columnDefinition = "$campo.getTipoDB()",#if ($campo.isAtributoLength()) length = $campo.getTamanho(),#end nullable = $campo.isColNull() )
#end

#macro( macroConstructor )

    #macroComentario( "CONSTRUCTOR" )

    public $modelo.getEntidade() {

        super();
    }

#end

#macro( macroGetterSetters )

    #macroComentario( "GETTERS && SETTERS" )

    #if ( $modelo.isChaveComposta() )
        #set ( $tipo = $StringUtils.join($modelo.getEntidade(),"Id") )
    public $tipo getId() {

        return this.id;
    }

    public void setId( final $tipo id ) {

        this.id = id;
    }

    #end
    #foreach ( $campo in $campos )
        #set ( $nomeAtributo = $campo.getColunaJava() )
        #set ( $nomeMetodo = $StringUtils.capitalize( $nomeAtributo ) )
        #set ( $tipo = $StringUtils.substringAfterLast( $campo.getTipoJava(), "." ) )
    public $tipo get$nomeMetodo() {

        return this.$nomeAtributo;
    }

    public void set$nomeMetodo( final $tipo $nomeAtributo ) {

        this.$nomeAtributo = $nomeAtributo;
    }

    #end

#end

#macro( macroComentarios )

    #macroComentario( "RELACIONAMENTOS" )


    #macroComentario( "METODOS TRANSIENTES" )


    #macroComentario( "CONSTANTES" )

#end

#macro( macroEqualsHashcode )

    #macroComentario( "EQUALS && HASHCODE" )

    @Override
    public boolean equals( final Object obj ) {

        if ( this == obj ) return true;
        if ( !( obj instanceof $modelo.getEntidade() ) ) return false;
        return Objects.equals( getId(), (($modelo.getEntidade()) obj).getId() );
    }

    @Override
    public int hashCode() {

        return Objects.hash( getId() );
    }

#end