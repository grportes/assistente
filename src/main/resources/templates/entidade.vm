#macroImports

/**
 * Classe mapeamento ref. a tabela [ $modelo.NomeCompletoTabela ]
 *
 * <p>Autor: $nomeAutor</p>
 */
#macroEntidade
public class $modelo.Entidade extends Model {

    #macroColunasMapeadas
    #macroConstructor
    #macroGetterSetters
    #macroComentarios
    #macroEqualsHashcode
    #macroToString
    #macroComentario( "METODOS AUXILIARES" )
}

#macro( macroImports )
import infra.models.Model;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;
    #if ( $modelo.ChaveComposta )
import javax.persistence.EmbeddedId;
    #end
    #if ( $modelo.AtributoVersion )
import javax.persistence.Version;
    #end
import java.util.Objects;

    #foreach ( $import in $importsNecessarios )
import $import;
    #end
    #foreach( $campo in $campos )
        #if ( $campo.Converter )
$StringUtils.join( "import models.commons.constantes.", $campo.NomeEnum, ";" )
$StringUtils.join( "import models.commons.converters.", $campo.NomeEnum, "Converter;" )
        #end
    #end
#end

#macro( macroEntidade )
@Entity
    #set ( $nomeCatalogo = $modelo.Catalogo )
    #set ( $nomeTabela = $modelo.Tabela )
    #if ( $StringUtils.isNotBlank( $nomeCatalogo ) )
@Table( name = "$nomeTabela", schema = "$modelo.Owner", catalog = "$nomeCatalogo" )
    #else
@Table( name = "$nomeTabela" )
    #end
#end

#macro( macroComentario $texto )
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // $texto
    //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#end

#macro( macroColunasMapeadas )

    #macroComentario( "COLUNAS MAPEADAS" )

    #if ( $modelo.ChaveComposta )
    @EmbeddedId
    private $StringUtils.join( $modelo.Entidade, "Id" ) id;

    #end
    #foreach( $campo in $campos )
        #macroDefinicaoColumn( $campo )

    #end
#end

#macro( macroDefinicaoColumn $campo )
    #if ( !$modelo.ChaveComposta && $campo.Pk )
    @Id #if ( $campo.AutoIncremento )@GeneratedValue( strategy = GenerationType.IDENTITY ) #end
    #end
    #if ( $StringUtils.equalsIgnoreCase( $campo.ColunaDB, "version" ) )
    @Version
    #end
    @Column( name = "$campo.ColunaDB", columnDefinition = "$campo.TipoDB",#if ($campo.AtributoLength) length = $campo.Tamanho,#end nullable = $campo.ColNull )
    #set ( $tipo = $StringUtils.substringAfterLast( $campo.TipoJava, "." ) )
    #if ( $campo.Converter )
        #set( $tipo = $campo.NomeEnum )
    @Converter( converter = $StringUtils.join( $campo.NomeEnum, "Converter.class" ) )
    #end
    private $tipo #if ($campo.Pk)id;#{else}$campo.ColunaJava;#end

#end

#macro( macroConstructor )

    #macroComentario( "CONSTRUCTOR" )

    public $modelo.Entidade {

        super();
    }

#end

#macro( macroGetterSetters )

    #macroComentario( "GETTERS && SETTERS" )

    #if ( $modelo.ChaveComposta )
        #set ( $tipo = $StringUtils.join($modelo.Entidade,"Id") )
    public $tipo getId() {

        return this.id;
    }

    public void setId( final $tipo id ) {

        this.id = id;
    }

    #end
    #foreach ( $campo in $campos )
        #set ( $nomeAtributo = $campo.ColunaJava )
        #set ( $nomeMetodo = $StringUtils.capitalize( $nomeAtributo ) )
        #set ( $tipo = $StringUtils.substringAfterLast( $campo.TipoJava, "." ) )
        #if ( $campo.Converter )
            #set( $tipo = $campo.NomeEnum )
        #end
    public $tipo get$nomeMetodo() {

        return this.$nomeAtributo;
    }

    public void set$nomeMetodo( final $tipo $nomeAtributo ) {

        this.$nomeAtributo = $nomeAtributo;
    }

    #end
#end

#macro( macroComentarios )

    #macroComentario( "RELACIONAMENTOS" )


    #macroComentario( "METODOS TRANSIENTES" )


    #macroComentario( "CONSTANTES" )

#end

#macro( macroEqualsHashcode )

    #macroComentario( "EQUALS && HASHCODE" )

    @Override
    public boolean equals( final Object obj ) {

        if ( this == obj ) return true;
        if ( !( obj instanceof $modelo.Entidade ) ) return false;
        return Objects.equals( getId(), (($modelo.Entidade) obj).getId() );
    }

    @Override
    public int hashCode() {

        return Objects.hash( getId() );
    }

#end

#macro( macroToString )

    #macroComentario( "TO_STRING" )

    @Override
    public String toString() {

        return String.format( "$modelo.Entidade { id = %s }", this.getId() );
    }


#end