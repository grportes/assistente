import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;

#foreach( $importNecessario in $importsNecessarios )
import $importNecessario;
#end

/**
 * Classe mapeamento ref. a tabela [ $modelo.getNomeCompletoTabela() ]
 *
 * <p>Autor: $nomeAutor</p>
 */
@Entity
#if( $StringUtils.isNotBlank($modelo.getCatalogo()) )
@Table( name = "$modelo.getTabela()", schema = "$modelo.getOwner()", catalog = "$modelo.getCatalogo()" )
#else
@Table( name = "$modelo.getTabela()" )
#end
public class $modelo.getEntidade() extends Model {

    #set( $texto = "COLUNAS MAPEADAS" )
    #comentario( )

    #if( $modelo.isChaveComposta() )
    @EmbeddedId
    private $StringUtils.join($modelo.getEntidade(),"Id") $StringUtils.join($modelo.getEntidade(),"Id");
    #else
    private
    #end

    #foreach( $campo in $campos )
    @Column( name = "$campo.getColunaDB()", columnDefinition = "$campo.getTipoDB()", length = 250, nullable = $campo.isColNull() )
    private $StringUtils.substringAfterLast($campo.getTipoJava(),".") $campo.getColunaJava();

    #end

    #set( $texto = "CONSTRUCTOR" )
    #comentario( )

    #set( $texto = "GETTERS && SETTERS" )
    #comentario( )
    #foreach( $campo in $modelo.getCampos() )
    #macroGetterSetters( $StringUtils.substringAfterLast($campo.getTipoJava(),".") $campo.getColunaJava() )
    #end

    #set( $texto = "METODOS TRANSIENTES" )
    #comentario( )

    #set( $texto = "CONSTANTES" )
    #comentario( )

    #set( $texto = "EQUALS && HASHCODE" )
    #comentario( )
    @Override
    public boolean equals( final Object obj ) {

        if (this == obj) return true;
        if (!( obj instanceof $modelo.getEntidade() )) return false;
        return Objects.equals( getId(), (($modelo.getEntidade()) obj).getId() );
    }

    @Override
    public int hashCode() {

        return Objects.hash( getId() );
    }

    #set( $texto = "METODOS AUXILIARES" )
    #comentario( )
}

#macro( comentario $texto )
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // $texto
    //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#end

#macro( macroGetterSetters $tipo $nomeCampo )
    public $tipo get$StringUtils.capitalize($nomeCampo)() {

        return this.$nomeCampo;
    }

    public void set$StringUtils.capitalize($nomeCampo)( final $tipo $nomeCampo ) {

        this.$nomeCampo = $nomeCampo;
    }

#end