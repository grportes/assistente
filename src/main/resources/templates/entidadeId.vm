#macroImports

/**
 * Classe que representa o Id da entidade {@link $modelo.Entidade}
 *
 * <p>Autor: $nomeAutor</p>
 */
@Embeddable
#set( $nomeEntidade = $StringUtils.join( $modelo.Entidade, "Id" ) )
public class $nomeEntidade implements Serializable {

    #macroColunasMapeadas
    #macroConstructor( $nomeEntidade )
    #macroGetterSetters
    #macroEqualsHashcode( $nomeEntidade )
}

#macro( macroImports )
import javax.persistence.Column;
import javax.persistence.Embeddable;
import java.io.Serializable;
import java.util.Objects;

    #foreach ( $import in $importsNecessarios )
import $import;

    #end
import static java.util.Objects.isNull;
#end

#macro( macroComentario $texto )
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // $texto
    //
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#end

#macro( macroColunasMapeadas )
    #macroComentario( "COLUNAS MAPEADAS" )

    #foreach( $campo in $campos )
    @Column( name = "$campo.ColunaDB", columnDefinition = "$campo.TipoDB",#if ($campo.AtributoLength) length = $campo.Tamanho,#end nullable = $campo.ColNull )
    private $StringUtils.substringAfterLast($campo.TipoJava,".") $campo.ColunaJava;

    #end
#end

#macro( macroConstructor $nomeEntidade )

    #macroComentario( "CONSTRUCTOR" )

    public $nomeEntidade() {

        super();
    }

    public $nomeEntidade(
        #foreach ( $campo in $campos )
            #set ( $nomeAtributo = $campo.ColunaJava )
            #set ( $tipo = $StringUtils.substringAfterLast( $campo.TipoJava, "." ) )
        final $tipo $nomeAtributo#if( $foreach.hasNext ),#end
        #end
    ) {

        #foreach ( $campo in $campos )
            #set ( $nomeAtributo = $campo.ColunaJava )
        this.$nomeAtributo = $nomeAtributo;
        #end
    }

#end

#macro( macroGetterSetters )

    #macroComentario( "GETTERS && SETTERS" )

    #foreach ( $campo in $campos )
        #set ( $nomeAtributo = $campo.ColunaJava )
        #set ( $nomeMetodo = $StringUtils.capitalize( $nomeAtributo ) )
        #set ( $tipo = $StringUtils.substringAfterLast( $campo.TipoJava, "." ) )
    public $tipo get$nomeMetodo() {

        return this.$nomeAtributo;
    }

    public void set$nomeMetodo( final $tipo $nomeAtributo ) {

        this.$nomeAtributo = $nomeAtributo;
    }
    #end

#end

#macro( macroEqualsHashcode $nomeEntidade )

    #set( $varObj = $StringUtils.join( $StringUtils.lowerCase($StringUtils.substring($nomeEntidade,0,1) ), $StringUtils.substring($nomeEntidade,1) ) )
    #macroComentario( "EQUALS && HASHCODE" )

    @Override
    public boolean equals( final Object obj ) {

        if ( this == obj ) return true;
        if ( isNull( obj ) || getClass() != o.getClass() ) return false;
        final $nomeEntidade $varObj = ($nomeEntidade) obj;
        #macroExpressoesEquals( $varObj )
    }

    @Override
    public int hashCode() {

        return Objects.hash(
            #foreach ( $campo in $campos )
                #set ( $metodo = $StringUtils.join( "get", $StringUtils.capitalize( $campo.ColunaJava ) ,"()" ) )
            $metodo#if( $foreach.hasNext ),#end
            #end
        );
    }
#end

#macro( macroExpressoesEquals $varObj )
    #set ( $primeiraLinha = true )
    #foreach ( $campo in $campos )
        #set ( $metodo = $StringUtils.join( "get", $StringUtils.capitalize( $campo.ColunaJava ), "()" ) )
        #set ( $expressao = $StringUtils.join( "Objects.equals( ", $metodo, ", ", $campo.ColunaJava , " )" ) )
        #if ( $primeiraLinha  )
            #set ( $primeiraLinha = false )
        return $expressao
        #else
            && $expressao #if( !$foreach.hasNext );#end
        #end
    #end
#end